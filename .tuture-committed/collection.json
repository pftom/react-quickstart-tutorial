{
  "name": "一杯茶的时间，上手 React 框架开发",
  "description": "React（也被称为 React.js 或者 ReactJS）是一个用于构建用户界面的 JavaScript 库。起源于 Facebook 内部项目，最初用来架设 Instagram 的网站，并于 2013 年 5 月开源。React 性能较高，并且它的声明式、组件化特性让编写代码变得简单，随着 React 社区的发展，越来越多的人投入 React 的学习和开发，使得 React 不仅可以用来开发 Web 应用，还能开发桌面端应用，TV应用，VR应用，IoT应用等，因此 React 还具有一次学习，随处编写的特性。本教程将带你快速入门 React 开发，通过 20-30 分钟的学习，你不仅可以了解 React 的基础概念，而且能开发出一个待办事项小应用，还在想什么了？马上学起来吧",
  "id": "07acf61",
  "cover": "tuture-assets/cover.png",
  "created": "2019-11-18T14:01:30.319Z",
  "github": "https://github.com/pftom/react-quickstart-tutorial",
  "topics": [
    "React"
  ],
  "categories": [
    "前端",
    "React",
    "入门"
  ],
  "articles": [
    {
      "name": "一杯茶的时间，上手 React 框架开发",
      "description": "React（也被称为 React.js 或者 ReactJS）是一个用于构建用户界面的 JavaScript 库。起源于 Facebook 内部项目，最初用来架设 Instagram 的网站，并于 2013 年 5 月开源。React 性能较高，并且它的声明式、组件化特性让编写代码变得简单，随着 React 社区的发展，越来越多的人投入 React 的学习和开发，使得 React 不仅可以用来开发 Web 应用，还能开发桌面端应用，TV应用，VR应用，IoT应用等，因此 React 还具有一次学习，随处编写的特性。本教程将带你快速入门 React 开发，通过 20-30 分钟的学习，你不仅可以了解 React 的基础概念，而且能开发出一个待办事项小应用，还在想什么了？马上学起来吧",
      "id": "07acf61",
      "cover": ".tuture/assets/cover.png",
      "created": "2019-11-18T14:01:30.319Z",
      "topics": [
        "React"
      ],
      "categories": [
        "前端",
        "React",
        "入门"
      ]
    }
  ],
  "steps": [
    {
      "type": "step",
      "commit": "a491123",
      "id": "pvtUh4uW",
      "articleId": "07acf61",
      "children": [
        {
          "type": "heading-two",
          "commit": "a491123",
          "id": "5IC7ryfO8",
          "fixed": true,
          "children": [
            {
              "text": "Hello, World"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "note",
              "level": "primary",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "此教程属于"
                    },
                    {
                      "link": true,
                      "url": "https://github.com/tuture-dev/react-roadmap",
                      "text": "React 前端工程师学习路线"
                    },
                    {
                      "text": "的一部分，点击可查看全部内容。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "我们将构建什么？"
                }
              ],
              "id": "uuReWZuVM"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这篇教程中，我们将展示给你如何使用 React 构建一个待办事项应用，下面最终项目的展示成果："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/todolist-show.gif",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "你也可以在这里看到我们最后构建的结果："
                },
                {
                  "link": true,
                  "url": "https://codesandbox.io/s/currying-grass-rglst",
                  "text": "最终结果"
                },
                {
                  "text": "。如果你现在对代码还不是很理解，或者你还不熟悉代码语法，别担心！这篇教程的目标就是帮助你理解 React 和它的语法。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们推荐你在继续阅读这篇教程之前先熟悉一下这个待办事项，你甚至可以尝试添加几个待办事项！你可能注意到当你添加了2个待办事项之后，会出现不同的颜色；这就是 React 中条件渲染的魅力。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当你熟悉了这个待办事项之后你就可以关闭它了。在这篇教程的学习中，我们将从一个 Hello World 代码模板开始，然后带领你初始化开发环境，这样你就可以开始构建这个待办事项了。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "你将学到什么？"
                }
              ],
              "id": "whg4PfRQ_"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "你将学习所有 React 的基础概念，其中又分为三个部分："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "编写组件相关：包括 JSX 语法、Component、Props"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "组件的交互：包括 State 和生命周期"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "组件的渲染：包括列表和 Key、条件渲染"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "和 DOM & HTML 相关：包括事件处理、表单。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "前提条件"
                }
              ],
              "id": "sTg39fjyI"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们假设你熟系 HTML 和 JavaScript，但即使你是从其他编程语言转过来的，你也能看懂这篇教程。我们还假设你对一些编程语言的概念比较熟悉，比如函数、对象、数组，如果对类了解就更好了。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你需要复习 JavaScript，我们推荐你阅读"
                },
                {
                  "link": true,
                  "url": "https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript",
                  "text": "这篇指南"
                },
                {
                  "text": "。你可能注意到了我们使用了一些 ES6 的特性 – 一个最近的 JavaScript 版本。在这篇教程，我们会使用 "
                },
                {
                  "link": true,
                  "url": "https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions",
                  "text": "arrow functions"
                },
                {
                  "text": "，"
                },
                {
                  "link": true,
                  "url": "https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes",
                  "text": "classes"
                },
                {
                  "text": "，和 "
                },
                {
                  "link": true,
                  "url": "https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const",
                  "text": "const"
                },
                {
                  "text": "。你可以使用 "
                },
                {
                  "link": true,
                  "url": "https://www.babeljs.cn/repl#?babili=false&browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=MYewdgzgLgBApgGzgWzmWBeGAeAFgRgD4AJRBEAGhgHcQAnBAEwEJsB6AwgbgChRJY_KAEMAlmDh0YWRiGABXVOgB0AczhQAokiVQAQgE8AkowAUAcjogQUcwEpeAJTjDgUACIB5ALLK6aRklTRBQ0KCohMQk6Bx4gA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=react&prettier=false&targets=&version=7.7.3",
                  "text": "Babel REPL"
                },
                {
                  "text": " 来检查 ES6 代码编译之后的结果。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "环境准备"
                }
              ],
              "id": "QrzZro81s"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先准备 Node 开发环境，访问 "
                },
                {
                  "link": true,
                  "url": "https://nodejs.org/zh-cn/",
                  "text": "Node 官方网站"
                },
                {
                  "text": "下载并安装。打开终端输入如下命令检测 Node 是否安装成功："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "Bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "node -v # v10.16.0"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "npm -v # 6.9.0"
                    }
                  ]
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Windows 用户需要打开 cmd 工具，Mac 和 Linux 是终端。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果上面的命令有输出且无报错，那么代表 Node 环境安装成功。接下来我们将使用 React 脚手架 – "
                },
                {
                  "link": true,
                  "url": "https://create-react-app.dev/",
                  "text": "Create React App"
                },
                {
                  "text": "（简称 CRA）来初始化项目，同时这也是官方推荐初始化 React 项目的最佳方式。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在终端中输入如下命令："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "Bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "npx create-react-app my-todolist"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "等待命令运行完成，接着输入如下命令开启项目："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "Bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "cd my-todolist && npm start"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "CRA 会自动开启项目并打开浏览器，你应该可以看到下面的结果："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/image.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "🎉🎉🎉 恭喜你！成功创建了第一个 React 应用！"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "现在 CRA 初始化的项目里有很多无关的内容，为了开始接下来的学习，我们还需要做一点清理工作。首先在终端中按 "
                },
                {
                  "code": true,
                  "text": "ctrl + c"
                },
                {
                  "text": " 关闭刚刚运行的开发环境，然后在终端中依次输入如下的命令："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "Bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 进入 src 目录"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "cd src"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 如果你在使用 Mac 或者 Linux："
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "rm -f *"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 或者，你在使用 Windows："
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "del *"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 然后，创建我们将学习用的 JS 文件"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 如果你在使用 Mac 或者 Linux："
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "touch index.js"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 或者，你在使用 Windows"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "type nul > index.js"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 最后，切回到项目目录文件夹下"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "cd .."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.js",
          "display": true,
          "id": "tCgZp0V4E",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "此时如果在终端项目目录下运行 "
                    },
                    {
                      "code": true,
                      "text": "npm start"
                    },
                    {
                      "text": " 会报错，因为我们的 "
                    },
                    {
                      "code": true,
                      "text": "index.js"
                    },
                    {
                      "text": " 还没有内容，我们在终端中使用 "
                    },
                    {
                      "code": true,
                      "text": "ctrl +c "
                    },
                    {
                      "text": " 关闭开发服务器，然后使用编辑器打开项目，在刚刚创建的 index.js 文件中加入如下代码："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "a491123",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们看到 "
                    },
                    {
                      "code": true,
                      "text": "index.js"
                    },
                    {
                      "text": " 里面的代码分为三个部分。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先是一系列导包，我们导入了 "
                    },
                    {
                      "code": true,
                      "text": "react"
                    },
                    {
                      "text": " 包，并命名为 React，导入了 "
                    },
                    {
                      "code": true,
                      "text": "react-dom"
                    },
                    {
                      "text": " 包并命名为 ReactDOM。对于包含 React 组件（我们将在之后讲解）的文件都必须在文件开头导入 React。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后我们定义了一个 React "
                    },
                    {
                      "link": true,
                      "url": "#component",
                      "text": "组件"
                    },
                    {
                      "text": "，命名为 App，继承自 React.Component，组件的内容我们将会在后面进行讲解。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们使用 ReactDOM 的 render 方法来渲染刚刚定义的 App 组件，"
                    },
                    {
                      "code": true,
                      "text": "render "
                    },
                    {
                      "text": "方法接收两个参数，第一个参数为我们的 React 根级组件，第二个参数接收一个 DOM 节点，代表我们将把和 React 应用挂载到这个 DOM 节点下，进而渲染到浏览器中。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "warning",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "上面代码的三个部分中，"
                        },
                        {
                          "bold": true,
                          "text": "第一部分和第三部分在整篇教程中是不会修改的"
                        },
                        {
                          "text": "，同时在编写任意 React 应用，这两个部分都是必须的。后面所有涉及到的代码修改都是关于第二部分代码的修改，或者是在第一部分到第三部分之间插入或删除代码。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "保存代码，在终端中使用 "
                    },
                    {
                      "code": true,
                      "text": "npm start"
                    },
                    {
                      "text": " 命令开启开发服务器，现在浏览器应该会显示如下内容："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": ".tuture/assets/image-d9453668ccb58bed.png",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "准备工作已经就绪！"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "你可能对上面的代码细节还不是很清楚，别担心，我们将马上带你领略 React 的神奇世界！"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "commit": "517171b",
      "id": "kHtQv0OY2",
      "articleId": "07acf61",
      "children": [
        {
          "type": "heading-two",
          "commit": "517171b",
          "id": "X2zBCd94B",
          "fixed": true,
          "children": [
            {
              "text": "JSX 语法"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先我们来看一下 React 引以为傲的特性之一 – JSX。它允许我们在 JS 代码中使用 XML 语法来编写用户界面，使得我们可以充分的利用 JS 的强大特性来操作用户界面。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "一个 React 组件的 render 方法中 "
                },
                {
                  "code": true,
                  "text": "return"
                },
                {
                  "text": " 的内容就为这个组件所将渲染的内容。比如我们现在的代码："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return <div>Hello, World</div>;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这里的 "
                },
                {
                  "code": true,
                  "text": "<div>Hello, World</div>"
                },
                {
                  "text": " 是一段 JSX 代码，它最终会被 "
                },
                {
                  "link": true,
                  "url": "https://www.babeljs.cn/",
                  "text": "Babel"
                },
                {
                  "text": " 转译成下面这段 JS 代码:"
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "React.createElement("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  'div',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  null,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  'Hello, World'"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ")"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "code": true,
                  "text": "React.createElement()"
                },
                {
                  "text": " 接收三个参数："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "第一个参数代表 JSX 元素标签。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "第二个参数代表这个 JSX 元素接收的属性，它是一个对象，这里因为我们的 "
                    },
                    {
                      "code": true,
                      "text": "div"
                    },
                    {
                      "text": " 没有接收任何属性，所以它是 "
                    },
                    {
                      "code": true,
                      "text": "null"
                    },
                    {
                      "text": "。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "第三个参数代表 JSX 元素包裹的内容。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "code": true,
                  "text": "React.createElement()"
                },
                {
                  "text": " 会对参数做一些检查确保你写的代码不会产生 BUG，它最终会创建一个类似下面的对象："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "{"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  type: 'div',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  props: {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    children: 'Hello, World'"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "};"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这些对象被称之为 “React Element”。你可以认为它们描述了你想要在屏幕上看到的内容。React 将会接收这些对象，使用它们来构建 DOM，并且对它们进行更新。"
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们推荐你使用 "
                    },
                    {
                      "link": true,
                      "url": "https://www.babeljs.cn/repl#?babili=false&browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=MYewdgzgLgBApgGzgWzmWBeGAeAFgRgD4AJRBEAGhgHUQAnBAE2wHoDCBuAKFEll6gBDAJZg4dGFkYhgAV1ToAdAHM4UAKJIFUAEIBPAJKMAFAHI6IEFFMBKbgCU4g4FAAiAeQCyiumkbjjRBQ0KCoBETE6Oy4gA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=react&prettier=false&targets=&version=7.7.3",
                      "text": "“Babel” "
                    },
                    {
                      "text": " 查看 JSX 的编译结果。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "App 组件最终返回这段 JSX 代码，所以我们使用 ReactDOM 的 "
                },
                {
                  "code": true,
                  "text": "render"
                },
                {
                  "text": " 方法渲染 App 组件，最终显示在屏幕上的就是 "
                },
                {
                  "code": true,
                  "text": "Hello, World\""
                },
                {
                  "text": " 内容。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "JSX 作为变量使用"
                }
              ],
              "id": "hv799hfn4"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "因为 JSX 最终会被编译成一个 JS 对象，所以我们可以把它当做一个 JS 对象使用，它享有和一个 JS 对象同等的地位，比如可以将其赋值给一个变量，我们修改上面代码中的  render 方法如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  const element = <div>Hello, World</div>;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return element;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "保存代码，我们发现浏览器中渲染的内容和我们之前类似。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "在 JSX 中使用变量"
                }
              ],
              "id": "uRensIq-a"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们可以使用大括号 "
                },
                {
                  "code": true,
                  "text": "{}"
                },
                {
                  "text": " 在 JSX 中动态的插入变量值，比如我们修改 render 方法如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  const content = \"World\";"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  const element = <div>Hello, {content}</div>;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return element;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "保存代码，发现浏览器中效果依然不变。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "JSX 中使用 JSX"
                }
              ],
              "id": "JltMe0voB"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们可以在 JSX 中再包含 JSX，这样我们编写任意层次的 HTML 结构："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    const element = <li>Hello, World</li>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        <ul>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          {element}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        </ul>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      </div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    )"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "JSX 中添加节点属性"
                }
              ],
              "id": "Il5REg7cZ"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们可以像在 HTML 中一样，给元素标签加上属性，只不过我们需要遵守"
                },
                {
                  "link": true,
                  "url": "https://baike.baidu.com/item/%E9%AA%86%E9%A9%BC%E5%91%BD%E5%90%8D%E6%B3%95",
                  "text": "驼峰式命名"
                },
                {
                  "text": "法则，比如在 HTML 上的属性 "
                },
                {
                  "code": true,
                  "text": "data-index"
                },
                {
                  "text": " 在 JSX 节点上要写成 "
                },
                {
                  "code": true,
                  "text": "dataIndex"
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const element = <div dataIndex=\"0\">Hello, World</div>;"
                    }
                  ]
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在 JSX 中所有的属性都要更换成驼峰式命名，比如 "
                    },
                    {
                      "code": true,
                      "text": "onclick"
                    },
                    {
                      "text": " 要改成 "
                    },
                    {
                      "code": true,
                      "text": "onClick"
                    },
                    {
                      "text": "，唯一比较特殊的就是 "
                    },
                    {
                      "code": true,
                      "text": "class"
                    },
                    {
                      "text": "，因为在 JS 中 "
                    },
                    {
                      "code": true,
                      "text": "class"
                    },
                    {
                      "text": " 是保留字，我们要把 "
                    },
                    {
                      "code": true,
                      "text": "class"
                    },
                    {
                      "text": " 改成 "
                    },
                    {
                      "code": true,
                      "text": "className"
                    },
                    {
                      "text": " 。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const element = <div className=\"app\">Hello, World</div>;"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.js",
          "display": true,
          "id": "1usyo2u7v",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实战"
                    }
                  ],
                  "id": "ROFi9XAaX"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们使用这一节讲解的 JSX 知识，来继续完成我们的待办事项应用。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在编辑器中打开 "
                    },
                    {
                      "code": true,
                      "text": "src/index.js"
                    },
                    {
                      "text": " ，对我们的第二段代码做如下改变："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "517171b",
              "hiddenLines": [
                0,
                1,
                18
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们使用 "
                    },
                    {
                      "code": true,
                      "text": "const"
                    },
                    {
                      "text": " 定义了一个 "
                    },
                    {
                      "code": true,
                      "text": "todoList"
                    },
                    {
                      "text": " 数组常量，并且在 JSX 中使用 "
                    },
                    {
                      "code": true,
                      "text": "{}"
                    },
                    {
                      "text": " 进行动态插值，插入了数组的四个元素。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后保存代码，浏览器中的效果应该是这样的："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": ".tuture/assets/image-fe47616b222f85ce.png",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "无需关闭刚才使用 "
                        },
                        {
                          "code": true,
                          "text": "npm start"
                        },
                        {
                          "text": " 开启的开发服务器，修改代码后，浏览器中的内容将会自动刷新！"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "你可能注意到了我们手动获取了数组的四个值，然后逐一的用 "
                },
                {
                  "code": true,
                  "text": "{}"
                },
                {
                  "text": " 语法插入到 JSX 中并最终渲染，这样做还比较原始，我们将在后面 "
                },
                {
                  "link": true,
                  "url": "%E5%88%97%E8%A1%A8%E5%92%8C-key",
                  "text": "列表和 Key"
                },
                {
                  "text": " 小节中简化这种写法。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这一小节中，我们了解了 JSX 的概念，并且实践了相关的知识。我们还提出了组件的概念，但是并没有深入讲解它，在下一小节中我们将详细地讲解"
                },
                {
                  "link": true,
                  "url": "#component",
                  "text": "组件"
                },
                {
                  "text": "的知识。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "commit": "fa38333",
      "id": "qOEYnrKg6",
      "articleId": "07acf61",
      "children": [
        {
          "type": "heading-two",
          "commit": "fa38333",
          "id": "BMttYkbWbQ",
          "fixed": true,
          "children": [
            {
              "text": "Component"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "React 的核心特点之一就是组件化，即我们将巨大的业务逻辑拆分成一个个逻辑清晰的小组件，然后通过组合这些组件来完成业务功能。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "React 提供两种组件写法：1）函数式组件  2）类组件。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "函数式组件"
                }
              ],
              "id": "ALpH8CVqSc"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在 React 中，函数式组件会默认接收一个 "
                },
                {
                  "code": true,
                  "text": "props"
                },
                {
                  "text": "  参数，然后返回一段 JSX："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function Todo(props) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return <li>Hello, 图雀</li>;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "关于 "
                },
                {
                  "code": true,
                  "text": "props"
                },
                {
                  "text": " 我们将在下一节中讲解。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "类组件"
                }
              ],
              "id": "_Nha-UB_fZ"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "通过继承自 React.Component 的类来代表一个组件。"
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class Todo extends React.Component {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return <li>Hello, 图雀</li>;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们发现，在类组件中，我们需要在 "
                },
                {
                  "code": true,
                  "text": "render"
                },
                {
                  "text": " 方法里面返回需要渲染的 JSX。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "组件组合"
                }
              ],
              "id": "qveDooe3x6"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们可以组合不同的组件来完成复杂的业务逻辑："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class App extends React.Component {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <ul>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        <Todo />"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        <Todo />"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      </ul>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    );"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在上面的代码中，我们在类组件 App 中使用了我们之前定义的 Todo 组件，我们看到，组件以 "
                },
                {
                  "code": true,
                  "text": "<Component />"
                },
                {
                  "text": " 的形式使用，比如 Todo 组件使用时为 "
                },
                {
                  "code": true,
                  "text": "<Todo />"
                },
                {
                  "text": "，我们在 Todo 组件没有子组件时使用这种写法；当 Todo 组件需要包含子组件时，我们需要写成下面的形式："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class App extends React.Component {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <ul>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        <Todo>Hello World</Todo>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        <Todo>Hello Tuture</Todo>>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      </ul>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    );"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "组件渲染"
                }
              ],
              "id": "vMaFdDaHP4"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们在第一节中讲到，通过 "
                },
                {
                  "code": true,
                  "text": "ReactDOM.render"
                },
                {
                  "text": " 方法接收两个参数：1）根组件 2) 待挂载的 DOM 节点，可以将组件的内容渲染到 HTML 中。"
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "ReactDOM.render(<App />, document.getElementById('root'));"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.js",
          "display": true,
          "id": "7yt_l156YX",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实战"
                    }
                  ],
                  "id": "N_YXxrbzVe"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们运用在这一节中学到的组件知识来继续完成我们的待办事项应用。我们编写一个 Todo 类组件，用于代表单个待办事项，然后在 App 类组件中使用 Todo 组件。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "src/index.js"
                    },
                    {
                      "text": " 文件，我们对代码做出如下修改："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "fa38333",
              "hiddenLines": [
                25,
                26,
                27
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "note",
                  "level": "warning",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "我们在只修改了 App 组件的内容，然后额外增加了一个 Todo 组件，整个 "
                        },
                        {
                          "code": true,
                          "text": "src/index.js"
                        },
                        {
                          "text": " 文件的其他代码内容我们没有做出修改。后面所有的文件内容修改也是如此。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "保存代码，然后你应该可以在浏览器中看到如下结果："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": ".tuture/assets/image-d0c6124fca32b8af.png",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "你可能注意到我们暂时没有使用之前定义的 todoList 数组，而是使用了四个相同的 Todo 组件，我们使用继承自 "
                },
                {
                  "code": true,
                  "text": "React.Component"
                },
                {
                  "text": " 类的形式定义 Todo 组件，然后在组件的 "
                },
                {
                  "code": true,
                  "text": "render"
                },
                {
                  "text": " 中返回了 "
                },
                {
                  "code": true,
                  "text": "<li>Hello, 图雀</li>"
                },
                {
                  "text": "，所以最终浏览器中会渲染四个 "
                },
                {
                  "code": true,
                  "text": "\"Hello, 图雀\""
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "并且因为 Todo 组件不需要包含子组件，所以我们写成了 "
                },
                {
                  "code": true,
                  "text": "<Todo />"
                },
                {
                  "text": " 的形式。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "现在4个待办事项都是一样的内容，这有点单调，你可能会想，如果可以像调用函数那样可以通过传参对组件进行个性化定制就好了，你的想法是对的！我们将在下一节中引出 props，它允许你给组件传递内容，从而进行个性化内容定制。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "commit": "4e765ff",
      "id": "1WR33xLksk",
      "articleId": "07acf61",
      "children": [
        {
          "type": "heading-two",
          "commit": "4e765ff",
          "id": "V8Ix0FL97x",
          "fixed": true,
          "children": [
            {
              "text": "Props"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "React 为组件提供了 Props，使得在使用组件时，可以给组件传入属性进行个性化渲染。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "函数式组件中使用 Props"
                }
              ],
              "id": "I5EzAYAWLB"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "函数式组件默认接收 "
                },
                {
                  "code": true,
                  "text": "props"
                },
                {
                  "text": " 参数，它是一个对象，用于保存父组件传递下来的内容："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function Todo(props) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    <li>Hello, {props.content}</li>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  )"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<Todo content=\"图雀\" />"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们给 Todo 函数式组件传递了一个 "
                },
                {
                  "code": true,
                  "text": "content"
                },
                {
                  "text": " 属性， 它的值为 "
                },
                {
                  "code": true,
                  "text": "\"图雀\""
                },
                {
                  "text": " ，所有传递的属性都会合并进 "
                },
                {
                  "code": true,
                  "text": "props"
                },
                {
                  "text": " 对象中，然后传递给 Todo 组件，这里 "
                },
                {
                  "code": true,
                  "text": "props"
                },
                {
                  "text": " 对象是这样的 "
                },
                {
                  "code": true,
                  "text": "props = { content: \"图雀\" }"
                },
                {
                  "text": " ，如果我们再传递一个属性："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<Todo content=\"图雀\" from=\"图雀社区\" />"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "最终 "
                },
                {
                  "code": true,
                  "text": "props"
                },
                {
                  "text": " 对象就会变成这样："
                },
                {
                  "code": true,
                  "text": "props={ content: \"图雀\", from: \"图雀社区\" }"
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如果给组件传递 "
                    },
                    {
                      "code": true,
                      "text": "key"
                    },
                    {
                      "text": " 属性是不会并入 props 对象中的，所以我们在子组件中也取不到 "
                    },
                    {
                      "code": true,
                      "text": "key"
                    },
                    {
                      "text": " 属性，我们将在"
                    },
                    {
                      "link": true,
                      "url": "#%E5%88%97%E8%A1%A8%E5%92%8C-key",
                      "text": " 列表和 Key"
                    },
                    {
                      "text": " 中详细讲解。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "类组件中使用 Props"
                }
              ],
              "id": "k_ASqZ7DuV"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "类组件中基本和函数式组件中的 Props 保持一致，除了是通过 "
                },
                {
                  "code": true,
                  "text": "this.props"
                },
                {
                  "text": " 来获取父组件传递下来的属性内容："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class Todo extends React.Component {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return <li>Hello, {this.props.content}</li>;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<Todo content=\"图雀\" />"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.js",
          "display": true,
          "id": "Y3zS_iAAJA",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实战"
                    }
                  ],
                  "id": "tXAnHxXaQC"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们运用这一节中学到的 Props 知识来继续完成我们的待办事项应用。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "src/index.js"
                    },
                    {
                      "text": " 文件，对 Todo 组件和 App 组件做出如下修改："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "4e765ff",
              "hiddenLines": [
                0,
                1,
                10,
                11,
                26,
                27,
                28
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "注意到我们又重新开始使用之前定义的 todoList 数组，然后给每个 Todo 组件传递一个 "
                    },
                    {
                      "code": true,
                      "text": "content"
                    },
                    {
                      "text": " 属性，分别赋值数组的每一项，最后在 Todo 组件中使用我们传递下来的 "
                    },
                    {
                      "code": true,
                      "text": "content"
                    },
                    {
                      "text": " 属性。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "保存修改的内容，你应该可以在浏览器中看到如下的内容："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": ".tuture/assets/image-1ccb228d6f96581c.png",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们的内容又回来了，和我们之前在 "
                    },
                    {
                      "link": true,
                      "url": "#jsx-%E8%AF%AD%E6%B3%95",
                      "text": "JSX"
                    },
                    {
                      "text": "  中看到的内容一样，但是这一次我们成功使用了组件来渲染接收到的 Props 内容。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "commit": "6ed0b12",
      "id": "6rlV1vdDzV",
      "articleId": "07acf61",
      "children": [
        {
          "type": "heading-two",
          "commit": "6ed0b12",
          "id": "CzIx9jgek1",
          "fixed": true,
          "children": [
            {
              "text": "State 和生命周期"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "React 通过给类组件提供 State 来创造交互式的内容 – 即内容可以在渲染之后发生变化。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "定义 State"
                }
              ],
              "id": "t4t6-zaok0"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "通过在类组件中添加 "
                },
                {
                  "code": true,
                  "text": "constructor"
                },
                {
                  "text": " 方法，并在其中定义和初始化 State："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "constructor(props) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    super(props);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    this.state = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      todoList: [\"图雀\", \"图雀写作工具\", \"图雀社区\", \"图雀文档\"]"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    };"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这里 constructor 方法接收的 props 属性就是我们在上一节中讲到的那个 props；并且 React 约定每个继承自 React.Component 的组件在定义 constructor 方法时，要在方法内首行加入 "
                },
                {
                  "code": true,
                  "text": "super(props)"
                },
                {
                  "text": " 。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "接着我们 "
                },
                {
                  "code": true,
                  "text": "this.state"
                },
                {
                  "text": " 来定义组件的 state，并使用 "
                },
                {
                  "code": true,
                  "text": "{ todoList:  [\"图雀\", \"图雀写作工具\", \"图雀社区\", \"图雀文档\"] }"
                },
                {
                  "text": " 对象来初始化 state。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "使用 State"
                }
              ],
              "id": "s9yLlF_FPe"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们可以在一个组件中的多处地方通过 "
                },
                {
                  "code": true,
                  "text": "this.state"
                },
                {
                  "text": " 的方式来使用 state，比如我们在这一节中将讲到的生命周期函数中，比如在 render 方法中："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class App extends React.Component {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  constructor(props) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    super(props);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    this.state = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      todoList: [\"图雀\", \"图雀写作工具\", \"图雀社区\", \"图雀文档\"]"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    };"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <ul>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        <Todo content={this.state.todoList[0]} />"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        <Todo content={this.state.todoList[1]} />"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        <Todo content={this.state.todoList[2]} />"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        <Todo content={this.state.todoList[3]} />"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      </ul>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    );"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们通过 "
                },
                {
                  "code": true,
                  "text": "this.state.todoList"
                },
                {
                  "text": " 可以获取我们在 "
                },
                {
                  "code": true,
                  "text": "constructor"
                },
                {
                  "text": " 方法中定义的 state，可以看到，我们使用 "
                },
                {
                  "code": true,
                  "text": "this.state.todoList[0]"
                },
                {
                  "text": " 的方式替代了之前的 "
                },
                {
                  "code": true,
                  "text": "todoList[0]"
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "更新 State"
                }
              ],
              "id": "rAUfyX4ZsS"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们通过 "
                },
                {
                  "code": true,
                  "text": "this.setState"
                },
                {
                  "text": " 方法来更新 state，从而使得网页内容在渲染之后还能变化："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "this.setState({ todoList: newTodoList });"
                    }
                  ]
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "关于 "
                    },
                    {
                      "code": true,
                      "text": "this.setState"
                    },
                    {
                      "text": " 我们需要注意以下几点："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "1）这里不能够通过直接修改 "
                    },
                    {
                      "code": true,
                      "text": "this.state"
                    },
                    {
                      "text": " 的方式来更新 "
                    },
                    {
                      "code": true,
                      "text": "state"
                    },
                    {
                      "text": ":"
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "// 错误的"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "this.state.todoList = newTodoList;"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "2）State 的更新是合并更新的："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "比如原 "
                    },
                    {
                      "code": true,
                      "text": "state"
                    },
                    {
                      "text": " 是这样的："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "constructor(props) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    super(props);"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    this.state = {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      todoList: [],"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      nowTodo: '',"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    };"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后你调用 "
                    },
                    {
                      "code": true,
                      "text": "this.setState()"
                    },
                    {
                      "text": " 方法来更新 "
                    },
                    {
                      "code": true,
                      "text": "state"
                    },
                    {
                      "text": ":"
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "this.setState({ nowTodo: \"Hello, 图雀\" });"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "React 将会合并更新，即将 "
                    },
                    {
                      "code": true,
                      "text": "nowTodo"
                    },
                    {
                      "text": " 的新内容合并进原 "
                    },
                    {
                      "code": true,
                      "text": "this.state"
                    },
                    {
                      "text": "，当更新之后，我们的 "
                    },
                    {
                      "code": true,
                      "text": "this.state"
                    },
                    {
                      "text": " 将会是下面这样的："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "this.state = { todoList: [], nowTodo: \"Hello, 图雀\" };"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "不会因为只单独设置了 "
                    },
                    {
                      "code": true,
                      "text": "nowTodo"
                    },
                    {
                      "text": " 的值，就将 "
                    },
                    {
                      "code": true,
                      "text": "todoList"
                    },
                    {
                      "text": " 给覆盖掉。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "生命周期函数"
                }
              ],
              "id": "6pGjXQPl4V"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "React 提供生命周期函数来追踪一个组件从创建到销毁的全过程。主要包含三个方面："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "挂载（Mounting）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "更新（Updating）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "卸载（Unmounting）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "一个简化版的生命周期的图示是这样的："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/image-8c0b915b0ef1289a.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "React 生命周期相对而言比较复杂，我们这里不会详细讲解每个部分，上面的图示用户可以试着了解一下，对它有个大概的印象。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "查看完整版的生命周期图示请参考这个链接："
                    },
                    {
                      "link": true,
                      "url": "http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/",
                      "text": "点击查看"
                    },
                    {
                      "text": "。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这里我们主要讲解挂载和卸载里面常用的生命周期函数。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "挂载"
                }
              ],
              "id": "6DvJPb-wej"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "其中挂载中主要常用的有三个方法："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "constructor()"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "render()"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "componentDidMount()"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "code": true,
                  "text": "constructor()"
                },
                {
                  "text": " 在组件创建时调用，如果你不需要初始化 "
                },
                {
                  "code": true,
                  "text": "State"
                },
                {
                  "text": " ，即不需要 "
                },
                {
                  "code": true,
                  "text": "this.state = { ... }"
                },
                {
                  "text": " 这个过程，那么你不需要定义这个方法。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "code": true,
                  "text": "render()"
                },
                {
                  "text": " 方法是挂载时用来渲染内容的方法，每个类组件都需要一个 render 方法。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "code": true,
                  "text": "componentDidMount()"
                },
                {
                  "text": " 方法是当组件挂载到 DOM 节点中之后会调用的一个方法，我们通常在这里发起一些异步操作，用于获取服务器端的数据等。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "卸载"
                }
              ],
              "id": "xJ6yTl01sY"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "卸载只有一个方法："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "componentWillUnmount()"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "componentWillUnmount 是当组件从 DOM 节点中卸载之前会调用的方法，我们一般在这里面销毁定时器等会导致内存泄露的内容。"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.js",
          "display": true,
          "id": "5273DA-ZhP",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实战"
                    }
                  ],
                  "id": "QgpaoI-ZaI"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们运用在这一节中学到的 State 和生命周期知识来继续完成我们的待办事项应用。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "src/index.js"
                    },
                    {
                      "text": "，对代码做出如下修改："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "6ed0b12",
              "hiddenLines": [
                8,
                47,
                48,
                49
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到我们主要改动了五个部分："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "将 todoList 移动到组件外面。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "定义 constructor 方法，并且通过设置 "
                        },
                        {
                          "code": true,
                          "text": "this.state = { todoList: [] }"
                        },
                        {
                          "text": " 来初始化组件的 State，这里我们将 "
                        },
                        {
                          "code": true,
                          "text": "todoList"
                        },
                        {
                          "text": " 初始化为空数组。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "添加 "
                        },
                        {
                          "code": true,
                          "text": "componentDidMount"
                        },
                        {
                          "text": " 生命周期方法，当组件挂载到 DOM 节点之后，设置一个时间为 2S 的定时器，并赋值给 "
                        },
                        {
                          "code": true,
                          "text": "this.timer"
                        },
                        {
                          "text": "，用于在组件卸载时销毁定时器。等到 2S 之后，使用 "
                        },
                        {
                          "code": true,
                          "text": "this.setState({ todoList: todoList })"
                        },
                        {
                          "text": " 来使用我们刚刚移动到组件外面的 todoList 来更新组件的 "
                        },
                        {
                          "code": true,
                          "text": "this.state.todoList"
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "添加 "
                        },
                        {
                          "code": true,
                          "text": "componentWillUnMount"
                        },
                        {
                          "text": " 生命周期方法，在组件卸载时，通过 "
                        },
                        {
                          "code": true,
                          "text": "clearTimeout(this.timer)"
                        },
                        {
                          "text": " 来清除我们之前设置的定时器，防止出现内存泄露。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "保存修改的代码，我们应该会看到浏览器中有一个内容更新的过程，在组件刚刚创建并挂载时，浏览器屏幕上应该是这样的："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/image-da8fa8dd48f49c0a.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "因为我们在 "
                },
                {
                  "code": true,
                  "text": "this.state"
                },
                {
                  "text": " 初始化时，将 "
                },
                {
                  "code": true,
                  "text": "todoList"
                },
                {
                  "text": " 设置为了空数组，所以一开始 "
                },
                {
                  "code": true,
                  "text": "\"Hello\""
                },
                {
                  "text": " 后面的 "
                },
                {
                  "code": true,
                  "text": "this.props.content"
                },
                {
                  "text": " 内容为空，我们就出现了四个 "
                },
                {
                  "code": true,
                  "text": "\"Hello, \""
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "然后当过了 2S 之后，我们可以看到熟悉的内容出现了："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/image-1ccb228d6f96581c.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "因为在过了 2S 之后，我们在定时器的回调函数中将 "
                },
                {
                  "code": true,
                  "text": "todoList"
                },
                {
                  "text": " 设置为了定义在组件外面的那个 "
                },
                {
                  "code": true,
                  "text": "todoList"
                },
                {
                  "text": " 数组，它有四个元素，所以显示在浏览器上面的内容又是我们之前的样子。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "恭喜你！成功创建了自己第一个交互式的组件！"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "读到这里，你有可能有点累了，试着离开座椅，活动活动，喝杯咖啡，精彩稍后继续 🙃"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "commit": "3c0e1f2",
      "id": "LNWznzK77A",
      "articleId": "07acf61",
      "children": [
        {
          "type": "heading-two",
          "commit": "3c0e1f2",
          "id": "yTSah_vmHL",
          "fixed": true,
          "children": [
            {
              "text": "列表和 Key"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "目前我们有四个 Todo 组件，我们是一个一个取值然后渲染，这显得有点原始，并且不可扩展，因为当我们的 todoList 数组很大的时候（比如 100 个元素），一个一个获取就显得不切实际了，这个时候我们就需要循环介入了。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "渲染组件列表"
                }
              ],
              "id": "_umhAA0UHM"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "JSX 允许我们渲染一个列表："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    const todoList = [\"图雀\", \"图雀写作工具\", \"图雀社区\", \"图雀文档\"];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    const renderTodoList = todoList.map((todo) => ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <Todo content={todo} />"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    ));"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <ul>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        {renderTodoList}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      </ul>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    );"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们通过对 todoList 进行 "
                },
                {
                  "code": true,
                  "text": "map"
                },
                {
                  "text": " 遍历，返回了一个 Todo 列表，然后使用 "
                },
                {
                  "code": true,
                  "text": "{}"
                },
                {
                  "text": " 插值语法渲染这个列表。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当然我们可以在 JSX 中使用表达式，所以上面的代码可以写成这样："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    const todoList = [\"图雀\", \"图雀写作工具\", \"图雀社区\", \"图雀文档\"];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <ul>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        {todoList.map((todo) => ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          <Todo content={todo} />"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        ))}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      </ul>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    );"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "加上 Key"
                }
              ],
              "id": "00gUDlfM5X"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "React 要求给列表中每个组件加上 "
                },
                {
                  "code": true,
                  "text": "key"
                },
                {
                  "text": " 属性，用于标志在列表中这个组件的身份，这样当列表内容进行了修改：增加或删除了元素时，React 可以根据 "
                },
                {
                  "code": true,
                  "text": "key"
                },
                {
                  "text": " 属性高效的对列表组件进行创建和销毁操作："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    const todoList = [\"图雀\", \"图雀写作工具\", \"图雀社区\", \"图雀文档\"];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <ul>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        {todoList.map((todo, index) => ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          <Todo content={todo} key={index} />"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        ))}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      </ul>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    );"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这里我们使用了列表的 "
                },
                {
                  "code": true,
                  "text": "index"
                },
                {
                  "text": " 作为组件的 "
                },
                {
                  "code": true,
                  "text": "key"
                },
                {
                  "text": " 值，React 社区推荐的最佳实践方式是使用列表数据元素的唯一标识符作为 "
                },
                {
                  "code": true,
                  "text": "key"
                },
                {
                  "text": " 值，如果你的数据是来自数据库获取，那么列表元素数据的主键可以作为 "
                },
                {
                  "code": true,
                  "text": "key"
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这里的 "
                },
                {
                  "code": true,
                  "text": "key"
                },
                {
                  "text": " 值不会作为 "
                },
                {
                  "link": true,
                  "url": "#props",
                  "text": "props"
                },
                {
                  "text": " 传递给子组件，React 会在编译组件时将 "
                },
                {
                  "code": true,
                  "text": "key"
                },
                {
                  "text": " 值从 props 中排除，即最终我们的第一个 Todo 组件的 "
                },
                {
                  "code": true,
                  "text": "props"
                },
                {
                  "text": " 如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "props = { content: \"图雀\" }"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "而不是我们认为的："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "props = { content: \"图雀\", key: 0 }"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.js",
          "display": true,
          "id": "OOEGddcjck",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实战"
                    }
                  ],
                  "id": "1k9ZKDP-5w"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们运用这一节学到的列表和 Key 的知识来继续完成我们的待办事项应用。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "src/index.js"
                    },
                    {
                      "text": "，对内容做出如下修改："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "3c0e1f2",
              "hiddenLines": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                45,
                46,
                47
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们将之前的手动获取元素渲染改成了使用内嵌表达式的方式，通过对 "
                    },
                    {
                      "code": true,
                      "text": "this.state.todoList"
                    },
                    {
                      "text": " 列表进行 map 操作生成Todo 组件列表，然后使用列表的 "
                    },
                    {
                      "code": true,
                      "text": "index"
                    },
                    {
                      "text": " 作为组件的 "
                    },
                    {
                      "code": true,
                      "text": "key"
                    },
                    {
                      "text": " 值，最后渲染。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "保存内容，查看浏览器里面的内容，我们可以看到内容会有一个变化的过程，一开始是这样的："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": ".tuture/assets/image-e45392ef60489227.png",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "你会发现一片空白，然后过了 2S 变成了下面这样："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": ".tuture/assets/image-1ccb228d6f96581c.png",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这是因为，一开始 "
                    },
                    {
                      "code": true,
                      "text": "this.state.todoList"
                    },
                    {
                      "text": " 在 constructor 中初始化时是空数组， "
                    },
                    {
                      "code": true,
                      "text": "this.state.todoList"
                    },
                    {
                      "text": " 进行 map 操作时返回空数组，所以我们的浏览器中没有内容，当组件挂载之后，等待 2S，我们更新 "
                    },
                    {
                      "code": true,
                      "text": "this.state.todoList"
                    },
                    {
                      "text": " 内容，就看到浏览器里面获得了更新。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "commit": "28b10dc",
      "id": "w_ky2PcbBg",
      "articleId": "07acf61",
      "children": [
        {
          "type": "heading-two",
          "commit": "28b10dc",
          "id": "3uUm2ewDya",
          "fixed": true,
          "children": [
            {
              "text": "条件渲染"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在 React 中，我们可以根据不同的情况，渲染不同的内容，这也被成为条件渲染。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "if-else 条件渲染"
                }
              ],
              "id": "KgczC8uhX2"
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    if (this.props.content === \"图雀\") {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      return <li>你好, {this.props.content}</li>;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    } else {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      return <li>Hello, {this.props.content}</li>;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在上面的代码中，我们判断 "
                },
                {
                  "code": true,
                  "text": "this.props.content"
                },
                {
                  "text": " 的内容，当内容为 "
                },
                {
                  "code": true,
                  "text": "\"图雀\""
                },
                {
                  "text": " 时，我们渲染 "
                },
                {
                  "code": true,
                  "text": "\"你好, 图雀\""
                },
                {
                  "text": "，对于其他内容我们依然渲染 "
                },
                {
                  "code": true,
                  "text": "\"Hello, 图雀\""
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "三元表达式条件渲染"
                }
              ],
              "id": "K31oq9YOyd"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们还可以直接在 JSX 中使用三元表达式进行条件渲染："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return this.props.content === \"图雀\"? ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <li>你好, {this.props.content}</li>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    ) : ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <li>Hello, {this.props.content}</li>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    );"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当然三元表达式还可以用来条件渲染不同的 React 元素属性："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <li className={this.state.isClicked ? 'clicked' : 'notclicked'}>Hello, {this.props.content}</li>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    )"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面我们判断组件的 "
                },
                {
                  "code": true,
                  "text": "this.state.isClicked"
                },
                {
                  "text": " 属性，如果 "
                },
                {
                  "code": true,
                  "text": "this.state.isClicked"
                },
                {
                  "text": " 属性为 "
                },
                {
                  "code": true,
                  "text": "true"
                },
                {
                  "text": "，那么我们最终渲染 "
                },
                {
                  "code": true,
                  "text": "\"clicked\""
                },
                {
                  "text": " 类："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <li className=\"clicked\"}>Hello, {this.props.content}</li>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    )"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果 "
                },
                {
                  "code": true,
                  "text": "this.state.isClicked"
                },
                {
                  "text": " 为 "
                },
                {
                  "code": true,
                  "text": "false"
                },
                {
                  "text": "，那么最终渲染 "
                },
                {
                  "code": true,
                  "text": "notclicked"
                },
                {
                  "text": " 类："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <li className=\"notclicked\">Hello, {this.props.content}</li>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    )"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.js",
          "display": true,
          "id": "3SOkKt9_a-",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实战"
                    }
                  ],
                  "id": "Xg1L5fCKVJ"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们运用本节学到的知识继续完成我们的待办事项应用。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "src/index.js"
                    },
                    {
                      "text": " ，对 App 和 Todo 组件作出如下修改："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "28b10dc",
              "hiddenLines": [
                0,
                1,
                2,
                3,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                45,
                46,
                47,
                48
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在首先在 App 组件中给 Todo 组件传入了一个 "
                    },
                    {
                      "code": true,
                      "text": "index"
                    },
                    {
                      "text": " 属性，然后在 Todo 组件的 render 方法中，对 "
                    },
                    {
                      "code": true,
                      "text": "this.props.index"
                    },
                    {
                      "text": " 进行判断，如果为偶数，那么渲染一个红色的文字，如果为奇数则保持不变。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们通过给 "
                    },
                    {
                      "code": true,
                      "text": "li"
                    },
                    {
                      "text": " 元素的 "
                    },
                    {
                      "code": true,
                      "text": "style"
                    },
                    {
                      "text": " 属性赋值一个对象来实现在 JSX 中设置元素的 CSS 属性，我们可以通过同样的方式设置任何 CSS 属性："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "// 黑底红字的 Hello, 图雀"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "<li style={{ color: \"red\", backgroundColor: \"black\"}}>Hello, 图雀</li>"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "warning",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "这里有一点需要做一下改变，就是像  "
                        },
                        {
                          "code": true,
                          "text": "background-color"
                        },
                        {
                          "text": " 这样的属性，要写成驼峰式 "
                        },
                        {
                          "code": true,
                          "text": "backgroundColor"
                        },
                        {
                          "text": "。对应的比如 "
                        },
                        {
                          "code": true,
                          "text": "font-size"
                        },
                        {
                          "text": "，也要写成 "
                        },
                        {
                          "code": true,
                          "text": "fontSize"
                        },
                        {
                          "text": "。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "保存代码，你应该可以在浏览器中看到如下内容："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": ".tuture/assets/image-fb5aa12d4320c007.png",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们看到浏览器中的效果确实是在偶数项（数组中 0 和 2 项）变成了红色的字体，而（数组中 1 和 3 项）还是之前的黑色样式。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "commit": "b77bcab",
      "id": "afR7VuayLR",
      "articleId": "07acf61",
      "children": [
        {
          "type": "heading-two",
          "commit": "b77bcab",
          "id": "gfKLrc-oQG",
          "fixed": true,
          "children": [
            {
              "text": "事件处理"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在 React 元素中处理事件和在 HTML 中类似，就是写法有点不一样。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "JSX 中的事件处理"
                }
              ],
              "id": "NCU34cRkZh"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这里的不一样主要包含以下两点："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "React 中的事件要使用驼峰式命名："
                    },
                    {
                      "code": true,
                      "text": "onClick"
                    },
                    {
                      "text": "，而不是全小写："
                    },
                    {
                      "code": true,
                      "text": "onclick"
                    },
                    {
                      "text": "。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在 JSX 中，你传递的是一个事件处理函数，而不是一个字符串。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在 HTML 中，我们处理事件是这样的："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "HTML",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<button onclick=\"handleClick()\">点我</button>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在 React 中，我们需要写成下面这样："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function Button() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  function handleClick() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    console.log('按钮被点击了');"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    <button onClick={handleClick}>点我</button>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  )"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "注意到我们在上面定义了一个函数式组件，然后返回一个按钮，并在按钮上面定义了点击事件和对应的处理方法。"
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们的的点击事件使用了驼峰式的 "
                    },
                    {
                      "code": true,
                      "text": "onClick"
                    },
                    {
                      "text": " 来命名，并且在 JSX 中传给事件的属性是一个函数："
                    },
                    {
                      "code": true,
                      "text": "handleClick"
                    },
                    {
                      "text": " ，而不是之前 HTML 中单纯的一个字符串："
                    },
                    {
                      "code": true,
                      "text": "\"handleClick()\""
                    },
                    {
                      "text": "。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "合成事件"
                }
              ],
              "id": "zIg3ZSV0b8"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们在以前编写 HTML 的事件处理时，特别是在处理表单时，常常需要禁用浏览器的默认属性。"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "比如一般表单提交时都会刷新浏览器，但是我们有时候希望提交表单之后不刷新浏览器，所以我们需要禁用浏览器的默认属性。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在 HTML 中我们禁用事件的默认属性是通过调用定义在事件上的 "
                },
                {
                  "code": true,
                  "text": "preventDefault"
                },
                {
                  "text": " 或者设置事件的 "
                },
                {
                  "code": true,
                  "text": "cancelBubble"
                },
                {
                  "text": "："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// 当点击某个链接之后，禁止打开页面"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "document.getElementById(\"myAnchor\").addEventListener(\"click\", function(event){"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  event.preventDefault()"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "});"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在 JSX 中，事件处理和这个类似："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function Link() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  function handleClick(event)  {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    event.preventDefault();"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    console.log('链接被点击了，但是它不会跳转页面，因为默认行为被禁用了');"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    <a onClick={handleClick} href=\"https://tuture.co\">点我</a>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  )"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.js",
          "display": true,
          "id": "5OSLcLg00v",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实战"
                    }
                  ],
                  "id": "VfpdPf-9ba"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们运用这一节中学到的知识来继续完成我们的待办事项应用。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们之前的待办事项的 todoList 数组都是直接硬编码在代码里，不可以进行增删改，这相当死板，一个更真实的 todoList 应该要具备增加功能，这一功能实现需要两个步骤："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "允许用户输入新的待办事项。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "将这个输入的待办事项加入到现有的 todoList 列表里面。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在这一小节中，我们将来实现第一个步骤的内容。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "src/index.js"
                    },
                    {
                      "text": " ，对 App 组件内容作出如下修改："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "b77bcab",
              "hiddenLines": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                64,
                65
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们新加入的代码主要有四个部分:"
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先在 state 里面添加了一个新的属性 "
                        },
                        {
                          "code": true,
                          "text": "nowTodo"
                        },
                        {
                          "text": "，我们将用它来保存用户新输入的待办事项。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "然后我们在 render 方法里面，在返回的 JSX 中使用 "
                        },
                        {
                          "code": true,
                          "text": "div"
                        },
                        {
                          "text": " 将内容包裹起来，接着加入了一个 "
                        },
                        {
                          "code": true,
                          "text": "div"
                        },
                        {
                          "text": "，在里面加入了一个 "
                        },
                        {
                          "code": true,
                          "text": "input"
                        },
                        {
                          "text": " 和 一个 "
                        },
                        {
                          "code": true,
                          "text": "div"
                        },
                        {
                          "text": "，input 用于处理用户的输入，我们在上面定义了 "
                        },
                        {
                          "code": true,
                          "text": "onChange"
                        },
                        {
                          "text": " 事件，事件处理函数是一个箭头函数，它接收事件 "
                        },
                        {
                          "code": true,
                          "text": "e"
                        },
                        {
                          "text": "，然后用户输入时，会在函数里面调用 "
                        },
                        {
                          "code": true,
                          "text": "this.handleChange"
                        },
                        {
                          "text": " 方法，将事件 "
                        },
                        {
                          "code": true,
                          "text": "e"
                        },
                        {
                          "text": " 传给这个方法。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在 "
                        },
                        {
                          "code": true,
                          "text": "handleChange"
                        },
                        {
                          "text": " 里面通过 "
                        },
                        {
                          "code": true,
                          "text": "this.setState"
                        },
                        {
                          "text": " 使用 input 的值来更新 "
                        },
                        {
                          "code": true,
                          "text": "nowTodo"
                        },
                        {
                          "text": " 的内容。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后在 div 里面使用 "
                        },
                        {
                          "code": true,
                          "text": "{}"
                        },
                        {
                          "text": " 插值语法展示 "
                        },
                        {
                          "code": true,
                          "text": "nowTodo"
                        },
                        {
                          "text": " 的内容。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "保存代码，打开浏览器，你应该可以看到如下的内容："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": ".tuture/assets/image-2a9067582bd70a07.png",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当你尝试在输入框中键入内容时，输入框的下面应会显示相同的内容："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": ".tuture/assets/image-479da0515331f7ba.png",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这是因为当我们在输入框里面输入内容时，我们使用了输入框的值更新 "
                    },
                    {
                      "code": true,
                      "text": "this.state.nowTodo"
                    },
                    {
                      "text": "，然后在输入框之下展示 "
                    },
                    {
                      "code": true,
                      "text": "this.state.nowTodo"
                    },
                    {
                      "text": " 的值。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "commit": "8619e9f",
      "id": "F54IQmbhH0",
      "articleId": "07acf61",
      "children": [
        {
          "type": "heading-two",
          "commit": "8619e9f",
          "id": "8_FvSHxr4r",
          "fixed": true,
          "children": [
            {
              "text": "表单"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "接下来我们来完成增加新的待办事项的功能的第二个步骤：允许用户将新输入的待办事项加入到 todoList 列表中。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "打开 "
                },
                {
                  "code": true,
                  "text": "src/index.js"
                },
                {
                  "text": " 文件，对 App 组件做出如下修改："
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.js",
          "display": true,
          "id": "QEeE1dITem",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "8619e9f",
              "hiddenLines": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "上面的变化主要有三个部分："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们将 "
                        },
                        {
                          "code": true,
                          "text": "render"
                        },
                        {
                          "text": " 方法中返回的 JSX 的最外层的 "
                        },
                        {
                          "code": true,
                          "text": "div"
                        },
                        {
                          "text": " 替换成了 "
                        },
                        {
                          "code": true,
                          "text": "form"
                        },
                        {
                          "text": "，然后在上面定义了  "
                        },
                        {
                          "code": true,
                          "text": "onSubmit"
                        },
                        {
                          "text": " 提交事件，并且通过一个箭头函数接收事件 "
                        },
                        {
                          "code": true,
                          "text": "e"
                        },
                        {
                          "text": " 来进行事件处理，在 form 被提交时，在箭头函数里面会调用 "
                        },
                        {
                          "code": true,
                          "text": "handleSubmit"
                        },
                        {
                          "text": " 方法， 并将 e 传递给这个函数。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在 handleSubmit 方法里面，我们首先调用了 "
                        },
                        {
                          "code": true,
                          "text": "e.preventDefault()"
                        },
                        {
                          "text": " 方法，来禁止浏览器的默认事件处理，这样我们在提交表单之后，浏览器就不会刷新，之后是将现有的 "
                        },
                        {
                          "code": true,
                          "text": "this.sate.todoList"
                        },
                        {
                          "text": " 列表加上新输入的 "
                        },
                        {
                          "code": true,
                          "text": "nowTodo"
                        },
                        {
                          "text": "，最后是使用 "
                        },
                        {
                          "code": true,
                          "text": "this.setState"
                        },
                        {
                          "text": " 更新 "
                        },
                        {
                          "code": true,
                          "text": "todoList"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "nowTodo"
                        },
                        {
                          "text": "；这样我们就可以通过输入内容添加新的待办事项了。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们将之前的展示 "
                        },
                        {
                          "code": true,
                          "text": "this.state.nowTodo"
                        },
                        {
                          "text": " 的 div 替换成 提交按钮 "
                        },
                        {
                          "code": true,
                          "text": "button"
                        },
                        {
                          "text": "，并将 button 的 "
                        },
                        {
                          "code": true,
                          "text": "type"
                        },
                        {
                          "text": " 设置为 "
                        },
                        {
                          "code": true,
                          "text": "submit"
                        },
                        {
                          "text": " 属性，表示在点击这个 button 之后，会触发表单提交；将新输入的内容加入现有的待办事项中。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "warning",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "我们在 "
                        },
                        {
                          "code": true,
                          "text": "handleSubmit"
                        },
                        {
                          "text": " 方法里面使用 "
                        },
                        {
                          "code": true,
                          "text": "this.setState"
                        },
                        {
                          "text": " 更新状态时，将 "
                        },
                        {
                          "code": true,
                          "text": "nowTodo"
                        },
                        {
                          "text": " 设置为了空字符串，代表我们在加入新的待办事项之后，将清除现有输入的 nowTodo 待办事项内容。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "保存代码，打开浏览器，在输入框里面输入点东西，你应该可以看到下面的内容："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": ".tuture/assets/image-fdd2b6a88757dfa6.png",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当你点击提交按钮之后，新的待办事项会加入到现有的 todoList 列表中，你应该可以看到下面的内容："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": ".tuture/assets/image-37a930ad1485173f.png",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "恭喜你！你成功使用 React 完成了一个简单的待办事项应用，它可以完成如下的功能："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "异步获取将要展示的待办事项：todoList"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "将待办事项展示出来"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "偶数项待办事项将会展示成红色"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "可以添加新的待办事项"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "做得好！我们希望你现在已经对 React 的运行机制有了一个比较完整的了解，也希望本篇教程能够为你踏入 React 开发世界提供一个好的开始！感谢你的阅读！"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "后记"
                }
              ],
              "id": "tKU-93-B9u"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "受限于篇幅，我们的待办事项还不完整，如果你有额外的时间或者你想要练习你新学到的 React 知识，下面是一些使我们的待办事项变得完整的一些想法，我们将按实现难度给这些功能排序："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在添加新的待办事项之后，清空输入框里面的内容，方便下一次输入。这样涉及到 "
                    },
                    {
                      "link": true,
                      "url": "https://zh-hans.reactjs.org/docs/forms.html#controlled-components",
                      "text": "React 受控组件"
                    },
                    {
                      "text": "的知识。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "允许对单个事项进行删除。这涉及到子组件"
                    },
                    {
                      "link": true,
                      "url": "https://zh-hans.reactjs.org/docs/lifting-state-up.html",
                      "text": "修改父组件的状态"
                    },
                    {
                      "text": "知识。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "允许用户对单个事项进行修改。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "允许用户对待办事项进行搜索。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "note",
              "level": "primary",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "此教程属于"
                    },
                    {
                      "link": true,
                      "url": "https://github.com/tuture-dev/react-roadmap",
                      "text": "React 前端工程师学习路线"
                    },
                    {
                      "text": "的一部分，点击可查看全部内容。"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}